// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nw.domain;

import com.nw.domain.TriggerType;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect TriggerType_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager TriggerType.entityManager;
    
    public static final List<String> TriggerType.fieldNames4OrderClauseFilter = java.util.Arrays.asList("triggeTypeName", "triggerTypeDescription");
    
    public static final EntityManager TriggerType.entityManager() {
        EntityManager em = new TriggerType().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long TriggerType.countTriggerTypes() {
        return entityManager().createQuery("SELECT COUNT(o) FROM TriggerType o", Long.class).getSingleResult();
    }
    
    public static List<TriggerType> TriggerType.findAllTriggerTypes() {
        return entityManager().createQuery("SELECT o FROM TriggerType o", TriggerType.class).getResultList();
    }
    
    public static List<TriggerType> TriggerType.findAllTriggerTypes(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM TriggerType o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, TriggerType.class).getResultList();
    }
    
    public static TriggerType TriggerType.findTriggerType(Long triggerType) {
        if (triggerType == null) return null;
        return entityManager().find(TriggerType.class, triggerType);
    }
    
    public static List<TriggerType> TriggerType.findTriggerTypeEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM TriggerType o", TriggerType.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<TriggerType> TriggerType.findTriggerTypeEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM TriggerType o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, TriggerType.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void TriggerType.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void TriggerType.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            TriggerType attached = TriggerType.findTriggerType(this.triggerType);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void TriggerType.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void TriggerType.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public TriggerType TriggerType.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        TriggerType merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
