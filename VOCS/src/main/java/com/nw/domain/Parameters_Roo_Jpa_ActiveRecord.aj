// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nw.domain;

import com.nw.domain.Parameters;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Parameters_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Parameters.entityManager;
    
    public static final List<String> Parameters.fieldNames4OrderClauseFilter = java.util.Arrays.asList("ownerLevel", "parameterValue");
    
    public static final EntityManager Parameters.entityManager() {
        EntityManager em = new Parameters().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Parameters.countParameterses() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Parameters o", Long.class).getSingleResult();
    }
    
    public static List<Parameters> Parameters.findAllParameterses() {
        return entityManager().createQuery("SELECT o FROM Parameters o", Parameters.class).getResultList();
    }
    
    public static List<Parameters> Parameters.findAllParameterses(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Parameters o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Parameters.class).getResultList();
    }
    
    public static Parameters Parameters.findParameters(Long parameterId) {
        if (parameterId == null) return null;
        return entityManager().find(Parameters.class, parameterId);
    }
    
    public static List<Parameters> Parameters.findParametersEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Parameters o", Parameters.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Parameters> Parameters.findParametersEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Parameters o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Parameters.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Parameters.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Parameters.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Parameters attached = Parameters.findParameters(this.parameterId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Parameters.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Parameters.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Parameters Parameters.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Parameters merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
