// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nw.web;

import com.nw.domain.DecisionTable;
import com.nw.domain.RowDT;
import com.nw.domain.RowDecisionTableMap;
import com.nw.web.RowDecisionTableMapController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect RowDecisionTableMapController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String RowDecisionTableMapController.create(@Valid RowDecisionTableMap rowDecisionTableMap, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, rowDecisionTableMap);
            return "rowdecisiontablemaps/create";
        }
        uiModel.asMap().clear();
        rowDecisionTableMap.persist();
        return "redirect:/rowdecisiontablemaps/" + encodeUrlPathSegment(rowDecisionTableMap.getRowDecisionTableMapId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String RowDecisionTableMapController.createForm(Model uiModel) {
        populateEditForm(uiModel, new RowDecisionTableMap());
        return "rowdecisiontablemaps/create";
    }
    
    @RequestMapping(value = "/{rowDecisionTableMapId}", produces = "text/html")
    public String RowDecisionTableMapController.show(@PathVariable("rowDecisionTableMapId") Long rowDecisionTableMapId, Model uiModel) {
        uiModel.addAttribute("rowdecisiontablemap", RowDecisionTableMap.findRowDecisionTableMap(rowDecisionTableMapId));
        uiModel.addAttribute("itemId", rowDecisionTableMapId);
        return "rowdecisiontablemaps/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String RowDecisionTableMapController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("rowdecisiontablemaps", RowDecisionTableMap.findRowDecisionTableMapEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) RowDecisionTableMap.countRowDecisionTableMaps() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("rowdecisiontablemaps", RowDecisionTableMap.findAllRowDecisionTableMaps(sortFieldName, sortOrder));
        }
        return "rowdecisiontablemaps/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String RowDecisionTableMapController.update(@Valid RowDecisionTableMap rowDecisionTableMap, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, rowDecisionTableMap);
            return "rowdecisiontablemaps/update";
        }
        uiModel.asMap().clear();
        rowDecisionTableMap.merge();
        return "redirect:/rowdecisiontablemaps/" + encodeUrlPathSegment(rowDecisionTableMap.getRowDecisionTableMapId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{rowDecisionTableMapId}", params = "form", produces = "text/html")
    public String RowDecisionTableMapController.updateForm(@PathVariable("rowDecisionTableMapId") Long rowDecisionTableMapId, Model uiModel) {
        populateEditForm(uiModel, RowDecisionTableMap.findRowDecisionTableMap(rowDecisionTableMapId));
        return "rowdecisiontablemaps/update";
    }
    
    @RequestMapping(value = "/{rowDecisionTableMapId}", method = RequestMethod.DELETE, produces = "text/html")
    public String RowDecisionTableMapController.delete(@PathVariable("rowDecisionTableMapId") Long rowDecisionTableMapId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        RowDecisionTableMap rowDecisionTableMap = RowDecisionTableMap.findRowDecisionTableMap(rowDecisionTableMapId);
        rowDecisionTableMap.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/rowdecisiontablemaps";
    }
    
    void RowDecisionTableMapController.populateEditForm(Model uiModel, RowDecisionTableMap rowDecisionTableMap) {
        uiModel.addAttribute("rowDecisionTableMap", rowDecisionTableMap);
        uiModel.addAttribute("decisiontables", DecisionTable.findAllDecisionTables());
        uiModel.addAttribute("rowdts", RowDT.findAllRowDTs());
    }
    
    String RowDecisionTableMapController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
