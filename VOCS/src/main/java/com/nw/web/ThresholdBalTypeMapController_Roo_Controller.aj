// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nw.web;

import com.nw.domain.BalType;
import com.nw.domain.Threshold;
import com.nw.domain.ThresholdBalTypeMap;
import com.nw.web.ThresholdBalTypeMapController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ThresholdBalTypeMapController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String ThresholdBalTypeMapController.create(@Valid ThresholdBalTypeMap thresholdBalTypeMap, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, thresholdBalTypeMap);
            return "thresholdbaltypemaps/create";
        }
        uiModel.asMap().clear();
        thresholdBalTypeMap.persist();
        return "redirect:/thresholdbaltypemaps/" + encodeUrlPathSegment(thresholdBalTypeMap.getThresholdBaltypeMapId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ThresholdBalTypeMapController.createForm(Model uiModel) {
        populateEditForm(uiModel, new ThresholdBalTypeMap());
        return "thresholdbaltypemaps/create";
    }
    
    @RequestMapping(value = "/{thresholdBaltypeMapId}", produces = "text/html")
    public String ThresholdBalTypeMapController.show(@PathVariable("thresholdBaltypeMapId") Long thresholdBaltypeMapId, Model uiModel) {
        uiModel.addAttribute("thresholdbaltypemap", ThresholdBalTypeMap.findThresholdBalTypeMap(thresholdBaltypeMapId));
        uiModel.addAttribute("itemId", thresholdBaltypeMapId);
        return "thresholdbaltypemaps/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String ThresholdBalTypeMapController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("thresholdbaltypemaps", ThresholdBalTypeMap.findThresholdBalTypeMapEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) ThresholdBalTypeMap.countThresholdBalTypeMaps() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("thresholdbaltypemaps", ThresholdBalTypeMap.findAllThresholdBalTypeMaps(sortFieldName, sortOrder));
        }
        return "thresholdbaltypemaps/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String ThresholdBalTypeMapController.update(@Valid ThresholdBalTypeMap thresholdBalTypeMap, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, thresholdBalTypeMap);
            return "thresholdbaltypemaps/update";
        }
        uiModel.asMap().clear();
        thresholdBalTypeMap.merge();
        return "redirect:/thresholdbaltypemaps/" + encodeUrlPathSegment(thresholdBalTypeMap.getThresholdBaltypeMapId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{thresholdBaltypeMapId}", params = "form", produces = "text/html")
    public String ThresholdBalTypeMapController.updateForm(@PathVariable("thresholdBaltypeMapId") Long thresholdBaltypeMapId, Model uiModel) {
        populateEditForm(uiModel, ThresholdBalTypeMap.findThresholdBalTypeMap(thresholdBaltypeMapId));
        return "thresholdbaltypemaps/update";
    }
    
    @RequestMapping(value = "/{thresholdBaltypeMapId}", method = RequestMethod.DELETE, produces = "text/html")
    public String ThresholdBalTypeMapController.delete(@PathVariable("thresholdBaltypeMapId") Long thresholdBaltypeMapId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        ThresholdBalTypeMap thresholdBalTypeMap = ThresholdBalTypeMap.findThresholdBalTypeMap(thresholdBaltypeMapId);
        thresholdBalTypeMap.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/thresholdbaltypemaps";
    }
    
    void ThresholdBalTypeMapController.populateEditForm(Model uiModel, ThresholdBalTypeMap thresholdBalTypeMap) {
        uiModel.addAttribute("thresholdBalTypeMap", thresholdBalTypeMap);
        uiModel.addAttribute("baltypes", BalType.findAllBalTypes());
        uiModel.addAttribute("thresholds", Threshold.findAllThresholds());
    }
    
    String ThresholdBalTypeMapController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
