// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nw.web;

import com.nw.domain.Category;
import com.nw.domain.PriceComponent;
import com.nw.web.PriceComponentController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PriceComponentController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String PriceComponentController.create(@Valid PriceComponent priceComponent, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, priceComponent);
            return "pricecomponents/create";
        }
        uiModel.asMap().clear();
        priceComponent.persist();
        return "redirect:/pricecomponents/" + encodeUrlPathSegment(priceComponent.getPriceComponentId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String PriceComponentController.createForm(Model uiModel) {
        populateEditForm(uiModel, new PriceComponent());
        return "pricecomponents/create";
    }
    
    @RequestMapping(value = "/{priceComponentId}", produces = "text/html")
    public String PriceComponentController.show(@PathVariable("priceComponentId") Long priceComponentId, Model uiModel) {
        uiModel.addAttribute("pricecomponent", PriceComponent.findPriceComponent(priceComponentId));
        uiModel.addAttribute("itemId", priceComponentId);
        return "pricecomponents/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String PriceComponentController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("pricecomponents", PriceComponent.findPriceComponentEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) PriceComponent.countPriceComponents() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("pricecomponents", PriceComponent.findAllPriceComponents(sortFieldName, sortOrder));
        }
        return "pricecomponents/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String PriceComponentController.update(@Valid PriceComponent priceComponent, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, priceComponent);
            return "pricecomponents/update";
        }
        uiModel.asMap().clear();
        priceComponent.merge();
        return "redirect:/pricecomponents/" + encodeUrlPathSegment(priceComponent.getPriceComponentId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{priceComponentId}", params = "form", produces = "text/html")
    public String PriceComponentController.updateForm(@PathVariable("priceComponentId") Long priceComponentId, Model uiModel) {
        populateEditForm(uiModel, PriceComponent.findPriceComponent(priceComponentId));
        return "pricecomponents/update";
    }
    
    @RequestMapping(value = "/{priceComponentId}", method = RequestMethod.DELETE, produces = "text/html")
    public String PriceComponentController.delete(@PathVariable("priceComponentId") Long priceComponentId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        PriceComponent priceComponent = PriceComponent.findPriceComponent(priceComponentId);
        priceComponent.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/pricecomponents";
    }
    
    void PriceComponentController.populateEditForm(Model uiModel, PriceComponent priceComponent) {
        uiModel.addAttribute("priceComponent", priceComponent);
        uiModel.addAttribute("categorys", Category.findAllCategorys());
    }
    
    String PriceComponentController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
